                                html += '<button class="remove-row" data-index="' + i + '" style="background: #dc3545; color: white; border: none; border-radius: 3px; padding: 5px 8px; cursor: pointer;">√ó</button>';
                                html += '</td>';
                                html += '</tr>';
                            }
                            
                            html += '</tbody></table>';
                            html += '</div>';
                            html += '<div style="margin-bottom: 20px;">';
                            html += '<button id="add-row-btn" style="background: #6c757d; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer; margin-right: 10px;"><i class="fa fa-plus"></i> Agregar fila</button>';
                            html += '<small style="color: #6c757d;">Presiona Enter en el √∫ltimo campo de precio para agregar una nueva fila autom√°ticamente</small>';
                            html += '</div>';
                            html += '<div style="text-align: right; border-top: 1px solid #dee2e6; padding-top: 15px;">';
                            html += '<button id="cancel-btn" style="margin-right: 10px; padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px; cursor: pointer;">Cancelar</button>';
                            html += '<button id="save-btn" style="padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px; cursor: pointer;">Guardar productos</button>';
                            html += '</div>';
                            
                            modal.innerHTML = html;
                            
                            // Add event listeners
                            attachEventListeners();
                        }
                        
                        function attachEventListeners() {
                            // Update row data on input
                            var nameInputs = modal.querySelectorAll('.temp-name');
                            var qtyInputs = modal.querySelectorAll('.temp-qty');
                            var priceInputs = modal.querySelectorAll('.temp-price');
                            
                            for (var i = 0; i < nameInputs.length; i++) {
                                nameInputs[i].oninput = function() {
                                    var index = parseInt(this.getAttribute('data-index'));
                                    rows[index].name = this.value;
                                };
                                
                                qtyInputs[i].oninput = function() {
                                    var index = parseInt(this.getAttribute('data-index'));
                                    rows[index].qty = parseFloat(this.value) || 0;
                                };
                                
                                priceInputs[i].oninput = function() {
                                    var index = parseInt(this.getAttribute('data-index'));
                                    rows[index].price = parseFloat(this.value) || 0;
                                };
                                
                                // Enter key on price field adds new row
                                priceInputs[i].onkeydown = function(e) {
                                    if (e.key === 'Enter') {
                                        var index = parseInt(this.getAttribute('data-index'));
                                        if (index === rows.length - 1) {
                                            addNewRow();
                                        }
                                    }
                                };
                            }
                            
                            // Remove row buttons
                            var removeButtons = modal.querySelectorAll('.remove-row');
                            for (var i = 0; i < removeButtons.length; i++) {
                                removeButtons[i].onclick = function() {
                                    var index = parseInt(this.getAttribute('data-index'));
                                    if (rows.length > 1) {
                                        rows.splice(index, 1);
                                        renderModal();
                                    }
                                };
                            }
                            
                            // Add row button
                            document.getElementById('add-row-btn').onclick = addNewRow;
                            
                            // Action buttons
                            document.getElementById('cancel-btn').onclick = closePopup;
                            document.getElementById('save-btn').onclick = saveProducts;
                            
                            // Focus first empty name input
                            var firstEmpty = modal.querySelector('.temp-name[value=""]');
                            if (firstEmpty) {
                                setTimeout(function() { firstEmpty.focus(); }, 100);
                            }
                        }
                        
                        function addNewRow() {
                            rows.push({name: '', qty: 1, price: 0});
                            renderModal();
                        }
                        
                        function closePopup() {
                            document.body.removeChild(popup);
                        }
                        
                        function saveProducts() {
                            // Validate and filter rows
                            var validRows = [];
                            for (var i = 0; i < rows.length; i++) {
                                var row = rows[i];
                                if (row.name && row.name.trim() && row.qty > 0 && row.price >= 0) {
                                    validRows.push({
                                        name: row.name.trim(),
                                        qty: row.qty,
                                        price: row.price
                                    });
                                }
                            }
                            
                            if (validRows.length === 0) {
                                alert('Por favor agrega al menos un producto v√°lido (con nombre, cantidad > 0 y precio >= 0)');
                                return;
                            }
                            
                            console.log('üî• Saving products:', validRows);
                            
                            // Try to add to POS order
                            addProductsToPOS(validRows);
                            
                            closePopup();
                        }
                        
                        function addProductsToPOS(products) {
                            console.log('üî• Adding products to POS:', products);
                            
                            // Use the global function to get POS instance
                            var pos = window.getPOSInstance();
                            
                            if (pos && pos.get_order) {
                                console.log('üî• Found POS instance, attempting to add products');
                                
                                var order = pos.get_order();
                                if (!order) {
                                    alert('No hay una orden activa en el POS');
                                    return;
                                }
                                
                                // Find the temp product
                                var tempProduct = null;
                                if (pos.db && pos.db.get_product_by_category) {
                                    var allProducts = pos.db.get_product_by_category(0) || [];
                                    tempProduct = allProducts.find(function(p) {
                                        return p.display_name === 'Producto temporal POS' || p.name === 'Producto temporal POS';
                                    });
                                }
                                
                                if (!tempProduct) {
                                    console.log('üî• Temp product not found, trying alternative search');
                                    // Try searching in all products
                                    if (pos.db && pos.db.product_by_id) {
                                        for (var id in pos.db.product_by_id) {
                                            var p = pos.db.product_by_id[id];
                                            if (p.name && p.name.includes('temporal')) {
                                                tempProduct = p;
                                                break;
                                            }
                                        }
                                    }
                                }
                                
                                if (!tempProduct) {
                                    alert('‚ùå Producto temporal no encontrado en el POS.\n\nAseg√∫rate de que "Producto temporal POS" est√©:\n1. Creado como producto tipo servicio\n2. Disponible en este POS\n3. La sesi√≥n est√© actualizada');
                                    return;
                                }
                                
                                console.log('üî• Found temp product:', tempProduct.name);
                                
                                // Add each product as a line
                                var addedCount = 0;
                                for (var i = 0; i < products.length; i++) {
                                    var product = products[i];
                                    
                                    try {
                                        var line = order.add_product(tempProduct, {
                                            quantity: product.qty,
                                            merge: false
                                        });
                                        
                                        if (line) {
                                            // Set custom price
                                            line.set_unit_price(product.price);
                                            
                                            // Mark as temp line
                                            line.temp_name = product.name;
                                            line.is_temp_line = true;
                                            
                                            // Override product name for display
                                            line.product.display_name = product.name;
                                            
                                            addedCount++;
                                            console.log('üî• Added line:', product.name, 'x', product.qty, '@', product.price);
                                        }
                                    } catch (error) {
                                        console.error('üî• Error adding product:', error);
                                    }
                                }
                                
                                if (addedCount > 0) {
                                    alert('‚úÖ ' + addedCount + ' productos temporales agregados exitosamente al carrito!');
                                } else {
                                    alert('‚ùå No se pudieron agregar los productos. Revisa la consola para m√°s detalles.');
                                }
                                
                            } else {
                                console.log('üî• POS instance not accessible');
                                
                                // Enhanced fallback with more info
                                var productList = '‚ö†Ô∏è No se pudo acceder autom√°ticamente al POS.\n\n';
                                productList += 'Productos temporales creados:\n';
                                for (var i = 0; i < products.length; i++) {
                                    productList += '‚Ä¢ ' + products[i].name + ' (Cant: ' + products[i].qty + ', Precio: $' + products[i].price + ')\n';
                                }
                                productList += '\nüìã Para agregar manualmente:\n';
                                productList += '1. Busca "Producto temporal POS" en el POS\n';
                                productList += '2. Agr√©galo al carrito\n';
                                productList += '3. Modifica el precio y cantidad seg√∫n la lista anterior\n';
                                productList += '4. Repite para cada producto';
                                
                                alert(productList);
                            }
                        }
                        
                        // Build and show popup
                        popup.appendChild(modal);
                        document.body.appendChild(popup);
                        renderModal();
                        
                        // Close on ESC
                        popup.onkeydown = function(e) {
                            if (e.key === 'Escape') closePopup();
                        };
                        
                        // Close on backdrop click
                        popup.onclick = function(e) {
                            if (e.target === popup) closePopup();
                        };
                    }
                    
                    // Multiple injection attempts
                    var attempts = 0;
                    var maxAttempts = 30;
                    
                    function tryInject() {
                        attempts++;
                        console.log('üî• Injection attempt', attempts, 'of', maxAttempts);
                        
                        if (injectButton()) {
                            console.log('üî• Injection successful!');
                            return;
                        }
                        
                        if (attempts < maxAttempts) {
                            setTimeout(tryInject, 1000);
                        } else {
                            console.log('üî• Max injection attempts reached');
                        }
                    }
                    
                    // Start injection attempts
                    setTimeout(tryInject, 1000);
                    setTimeout(tryInject, 3000);
                    setTimeout(tryInject, 5000);
                }
                
                // Start when DOM is ready
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', waitForPOS);
                } else {
                    waitForPOS();
                }
                
                console.log('üî•üî•üî• POS TEMP PRODUCTS SETUP COMPLETE üî•üî•üî•');
                ]]>
            </script>
        </xpath>
    </template>
</odoo>